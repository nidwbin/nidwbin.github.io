<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SELF-SUPERVISED TEXT-INDEPENDENT SPEAKER VERIFICATION USING PROTOTYPICAL MOMENTUM CONTRASTIVE LEARNING</title>
    <url>/post/61813/</url>
    <content><![CDATA[<h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>引用Bibtex</p>
<pre class="line-numbers language-bibtex" data-language="bibtex"><code class="language-bibtex">@inproceedings&#123;xia2021self,
  title&#x3D;&#123;Self-supervised text-independent speaker verification using prototypical momentum contrastive learning&#125;,
  author&#x3D;&#123;Xia, Wei and Zhang, Chunlei and Weng, Chao and Yu, Meng and Yu, Dong&#125;,
  booktitle&#x3D;&#123;ICASSP 2021-2021 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP)&#125;,
  pages&#x3D;&#123;6723--6727&#125;,
  year&#x3D;&#123;2021&#125;,
  organization&#x3D;&#123;IEEE&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>发表时间：2021<br>发表期刊：ICASSP</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>SimCLR的框架和MoCo的框架。MoCo的框架是修改后的，使用队列让K值达到1000。</p>
<img src="/post/61813/2022-04-06-21-51-14.png" class="">
<p>论文框架，用到了原型记忆库，在每个epoch都对整个数据集做M聚类，把样本中心（原型）加入记忆库。</p>
<img src="/post/61813/2022-04-06-22-09-58.png" class="">
<p>把MoCo的loss推广到半监督学习，使用到所有有标签数据。</p>
<img src="/post/61813/2022-04-06-22-15-40.png" class="">
<img src="/post/61813/2022-04-06-22-16-42.png" class="">
<h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>标准的TDNN</p>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><table>
<thead>
<tr>
<th>项目</th>
<th>设置</th>
</tr>
</thead>
<tbody><tr>
<td>数据集</td>
<td>VoxCeleb2训练，VoxCeleb1测试</td>
</tr>
<tr>
<td>测试标准</td>
<td>EER和minDCF</td>
</tr>
<tr>
<td>特征</td>
<td>30MFCC，25ms&#x2F;10ms，VAD</td>
</tr>
<tr>
<td>数据增强</td>
<td>WavAug的progressive对自监督有效：reverb-augmentation+MUSAN上再增强。SpecAug用时间扭曲和频率masking。</td>
</tr>
</tbody></table>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><img src="/post/61813/2022-04-06-22-40-59.png" class="">
<img src="/post/61813/2022-04-06-22-41-19.png" class="">
<img src="/post/61813/2022-04-06-22-41-36.png" class="">]]></content>
      <categories>
        <category>论文阅读笔记</category>
        <category>简易笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Scoop使用体验</title>
    <url>/post/55364/</url>
    <content><![CDATA[<h2 id="写在前面的"><a href="#写在前面的" class="headerlink" title="写在前面的"></a>写在前面的</h2><p>太久没更新了，过来水水博客。这次的话就讲讲Scoop的简单使用体验吧吧。</p>
<h2 id="Scoop介绍"><a href="#Scoop介绍" class="headerlink" title="Scoop介绍"></a>Scoop介绍</h2><p>我的笔记本的Bios被锁了大部分功能，没办法装Linux。<br>那么为了在Windows下获得比较舒服的使用体验，除了要注意文件管理外，还要一个合适的软件管理器来管理软件。（别说控制面板，太难用了，还要自己挨个更新。）<br>Scoop就是一个比较好用的软件管理器，类似Linux的包管理器。类似的还有<a href="https://chocolatey.org/">Chocolatey</a>和<a href="https://docs.microsoft.com/zh-cn/windows/package-manager/winget/">Winget</a>。<br>有一说一，微软拥抱开源后确实开了些好坑，不过能不能填好就不知道了（&#x3D;。&#x3D;）。</p>
<h2 id="安装体验"><a href="#安装体验" class="headerlink" title="安装体验"></a>安装体验</h2><p>Scoop本身的安装还是挺友好的，就是要配置好文件目录。对于热门软件来说，比如Jetbrains全家桶（Jetbrains打钱），Git，GCC，7zip等等，甚至对于大部分开源软件都是好用的。但对于比较冷门的软件就不太行，当然，有版权的绝大部分不行。<br>然后就是安装速度，github用爱发电是真的难顶，推荐搭配科学上网食用。</p>
<h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>Scoop默认会把安装过的版本都保存下来方便回滚，甚至安装包都会缓存下，所以需要不定时清理下缓存，不过不是什么大事，使用体验还可以。</p>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>软件更新就一行命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">scoop update *<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>对于全局软件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> scoop update * -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这里sudo是使用<a href="https://github.com/gerardog/gsudo">gsudo</a>带来的管理员运行体验，赞美大神。大家可以支持一波<a href="https://github.com/gerardog/gsudo">gsudo</a>，点个star什么的。</p>
<h2 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h2><p>备份和pip一样，都是导出一个txt文件，然后网络下载，这倒是挺方便的。命令如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">scoop <span class="token builtin class-name">export</span> <span class="token operator">></span> <span class="token string">"scoop.txt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>至于恢复。。。开发中。。。有导出总比没有好。。。</p>
<h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><p>除了这个智障的恢复功能外，其他好像没什么问题，aria2的bug也修好了👍，就是输出有点多。不过毕竟用爱发电，能做到这一步已经很不错了，希望Scoop越来越好吧。</p>
]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>Scoop</tag>
        <tag>包管理器</tag>
      </tags>
  </entry>
  <entry>
    <title>WIN10家庭版docker+VMware安装</title>
    <url>/post/5013/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>由于windows10家庭版没有hyper-v,而docker需要虚拟机支持，所以正常windows10家庭版是无法使用docker安装包安装。但天无绝人之路，可以通过一些操作来实现。</p>
<h3 id="一些操作"><a href="#一些操作" class="headerlink" title="一些操作"></a>一些操作</h3><ul>
<li>购买windows10专业版，<del>土豪请出门右转，谢谢</del></li>
<li>弃坑windows，投入mac or linux的怀抱</li>
<li>手工开启hyper-v，不是正版，影响更新，hyper-v的性能。。。</li>
<li>使用docker toolbox安装</li>
</ul>
<h3 id="关于docker-toolbox"><a href="#关于docker-toolbox" class="headerlink" title="关于docker toolbox"></a>关于docker toolbox</h3><p>docker toolbox的原理是使用Visual box来代替hyper-v，从而实现docker的运行，因此docker toolbox没有VMware也是可以运行的，但如果你已经安装了VMware，那么Visual box和VMware之间的战争便愉快的开始了</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>开启电脑的虚拟化(<a href="https://jingyan.baidu.com/article/574c52195b675c6c8d9dc138.html">百度经验</a>)</li>
<li>安装并激活<a href="https://communities.vmware.com/thread/598748">VMware</a>(一个<a href="https://jingyan.baidu.com/article/3f16e00321bbb12591c10304.html">百度经验</a>的密钥：CG392-4PX5J-H816Z-HYZNG-PQRG2)</li>
<li>安装<a href="http://mirrors.aliyun.com/docker-toolbox/windows/docker-toolbox/">docker toolbox</a>，推荐装在D盘</li>
<li>下载docker的<a href="https://github.com/pecigonzalo/docker-machine-vmwareworkstation/releases/">VMware驱动程序</a>，不安装</li>
</ul>
<h2 id="第一步：卸载Visual-box或VMware"><a href="#第一步：卸载Visual-box或VMware" class="headerlink" title="第一步：卸载Visual box或VMware"></a>第一步：卸载Visual box或VMware</h2><p>如果你选择的是卸载VMware，那么docker到这里就已经可用了，当然这不是本篇blog的目的，相信也不是你的目的，所以，卸载Visual box</p>
<h2 id="第二步：移动VMware驱动"><a href="#第二步：移动VMware驱动" class="headerlink" title="第二步：移动VMware驱动"></a>第二步：移动VMware驱动</h2><p>将之前下载的VMware驱动移动到docker toolbox的安装目录下，即与docker.exe处于同一目录</p>
<h2 id="第三步：复制boot2docker-iso"><a href="#第三步：复制boot2docker-iso" class="headerlink" title="第三步：复制boot2docker.iso"></a>第三步：复制boot2docker.iso</h2><ul>
<li>复制boot2docker.iso</li>
<li>在当前目录下建立machine文件夹，进入machine文件夹后建立cache文件夹</li>
<li>将boot2docker.iso复制到cache文件夹内</li>
<li>ps: machine文件夹可以任意命名，cache文件夹不能任意</li>
</ul>
<h2 id="第四步：建立其他文件夹"><a href="#第四步：建立其他文件夹" class="headerlink" title="第四步：建立其他文件夹"></a>第四步：建立其他文件夹</h2><p>docker默认是将镜像和虚拟机往C盘里存，<del>都惦记着我的C盘，你看它多么的弱小，无助。。。</del>，所以我们要改一下</p>
<ul>
<li>在machine文件夹内（与cache同级）建立machines文件夹用于保存虚拟机</li>
<li>进入machines文件夹，建立dev文件夹，dev是你虚拟机的名字</li>
<li>将machine整个文件夹搬到你想要的位置</li>
<li>ps：machines文件夹可任意命名</li>
</ul>
<h2 id="第五步：修改环境变量"><a href="#第五步：修改环境变量" class="headerlink" title="第五步：修改环境变量"></a>第五步：修改环境变量</h2><ul>
<li>资源管理器&gt;此电脑右键&gt;属性&gt;高级系统设置&gt;环境变量</li>
<li>添加或修改如下环境变量</li>
<li>ps:machine、machines、dev与之前你命的名相对应<table>
<thead>
<tr>
<th>变量名</th>
<th>变量值</th>
</tr>
</thead>
<tbody><tr>
<td>DOCKER_CERT_PATH</td>
<td>你将machine搬到的位置（如D:）\machine\machines\dev</td>
</tr>
<tr>
<td>DOCKER_MACHINE_NAME</td>
<td>dev</td>
</tr>
<tr>
<td>DOCKER_TOOLBOX_INSTALL_PATH</td>
<td>docker toolbox安装目录</td>
</tr>
<tr>
<td>MACHINE_STORAGE_PATH</td>
<td>你将machine搬到的位置（如D:）\machine</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="第六步：建立docker虚拟机"><a href="#第六步：建立docker虚拟机" class="headerlink" title="第六步：建立docker虚拟机"></a>第六步：建立docker虚拟机</h2><p>打开powershell，输入如下命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker-machine create --driver<span class="token operator">=</span>vmwareworkstation dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>ps:dev与之前你命的名相对应</p>
<h2 id="第七步：查看docker虚拟机信息"><a href="#第七步：查看docker虚拟机信息" class="headerlink" title="第七步：查看docker虚拟机信息"></a>第七步：查看docker虚拟机信息</h2><p>打开powershell，输入如下命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker-machine <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>至此，你的docker已经可以安装好了，推荐配合git bash食用<br>ps:如果你的VMware经常卡死、未响应，那么推荐打开虚拟打印机，编辑&gt;首选项(ctrl+p)&gt;设备&gt;启用虚拟打印机</p>
]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>WIN10+docker+VMware安装MySQL8.0</title>
    <url>/post/47162/</url>
    <content><![CDATA[<h2 id="写在前面的"><a href="#写在前面的" class="headerlink" title="写在前面的"></a>写在前面的</h2><p>docker对windows真的很不友好，所以早日脱坑，linux大法好<br>如果你还没有安装好docker，而你又刚好想用VMware来代替hyper-v或Visual box，那么推荐阅读我的<a href="https://wbink.github.io/2019/09/13/WIN10%E5%AE%B6%E5%BA%AD%E7%89%88docker-vmware%E5%AE%89%E8%A3%85/#more">这篇博文</a></p>
<h2 id="建立MySQL数据文件夹"><a href="#建立MySQL数据文件夹" class="headerlink" title="建立MySQL数据文件夹"></a>建立MySQL数据文件夹</h2><p>在电脑里选一块风水宝地，建立一个文件夹用于保存MySQL的数据，名字最好是英文的，我建立了MySQL文件夹<br><img src="/2.png" title="MySQL文件夹"></p>
<p>然后在文件夹里建立三个文件夹如下，如果你自己命名，请注意之后的bash命令也要做相应修改<br><img src="/3.png" title="MySQL文件夹内容"></p>
<p>文件夹作用如下</p>
<table>
<thead>
<tr>
<th>文件夹名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>conf</td>
<td>保存自己的一些设置，比如加密规则</td>
</tr>
<tr>
<td>data</td>
<td>保存数据库数据</td>
</tr>
<tr>
<td>logs</td>
<td>保存数据库日志(好像有点问题)</td>
</tr>
</tbody></table>
<p>然后在conf文件夹里建立my.cnf文件，内容如下(MySQL8的默认加密方式改变了，所以要修改下)</p>
<pre class="line-numbers language-none"><code class="language-none">[mysqld]  
lower_case_table_names&#x3D;1  
default_authentication_plugin&#x3D; mysql_native_password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="Vmware的设置"><a href="#Vmware的设置" class="headerlink" title="Vmware的设置"></a>Vmware的设置</h2><p>打开VMware&gt;打开docker虚拟机&gt;编辑虚拟机设置&gt;选项&gt;共享文件夹&gt;添加<br><img src="/1.png" title="开启共享文件夹"><br>将MySQL数据希望保存的位置添加进去共享给虚拟机(即之前的MySQL文件夹)</p>
<h2 id="建立MySQL实例"><a href="#建立MySQL实例" class="headerlink" title="建立MySQL实例"></a>建立MySQL实例</h2><p>打开git bash(<strong>不要用powershell和cmd！不要用powershell和cmd！不要用powershell和cmd！</strong>)，输入如下命令运行docker</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker-machine start *你的虚拟机名*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="/4.png" title="开启docker"></p>
<p>激活</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker-machine <span class="token function">env</span> *你的虚拟机名*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="/5.png" title="激活docker"><br>这时，系统会提示你用另一个命令来激活，copy后输入回车即可，我这里是</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">    <span class="token variable">$eval</span> <span class="token variable"><span class="token variable">$(</span>"D:<span class="token punctuation">\</span>Program Files<span class="token punctuation">\</span>Docker Toolbox<span class="token punctuation">\</span>docker-machine.exe" <span class="token function">env</span> dev<span class="token variable">)</span></span>``<span class="token variable"><span class="token variable">`</span>

下载MySQL<span class="token punctuation">(</span>*下载慢的宝宝请先换源*<span class="token punctuation">)</span>
<span class="token variable">`</span></span>``bash
    <span class="token function">docker</span> pull mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我这里已经下载好了，不演示了</p>
<p>建立实例</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token punctuation">\</span>
-p <span class="token number">3306</span>:3306 <span class="token punctuation">\</span>
-e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>*你的root密码* <span class="token punctuation">\</span>
-v //mnt/hgfs/ProgramData/MySQL/data:/var/lib/mysql:rw <span class="token punctuation">\</span>
-v //mnt/hgfs/ProgramData/MySQL/logs:/var/log/mysql:rw <span class="token punctuation">\</span>
-v //mnt/hgfs/ProgramData/MySQL/conf/my.cnf:/etc/mysql/conf.d/my.cnf:rw <span class="token punctuation">\</span>
--name mysql <span class="token punctuation">\</span>
--restart<span class="token operator">=</span>always <span class="token punctuation">\</span>
-d mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>重点来了</strong>，这些命令的冒号左边是你电脑的实际接口和路径，右边是docker虚拟机的接口和路径，你电脑的共享文件夹被挂载到了虚拟机的&#x2F;&#x2F;mnt&#x2F;hgfs&#x2F;下(双斜杠不能丢，不然git bash会将路径转译导致虚拟机不识别)，所以你只要修改&#x2F;&#x2F;mnt&#x2F;hgfs到MySQL(如果你没改名)之间的内容为你的电脑上MySQL文件夹的绝对路径即可(<strong>去掉盘符和MySQL</strong>)，比如，我的MySQL文件夹的绝对路径是D:\ProgramData\MySQL，将盘符和MySQL去掉是\ProgramData\，然后将\改为&#x2F;填进去就可以了。<br>如果你很不幸，共享文件夹没有挂载到&#x2F;&#x2F;mnt&#x2F;hgfs&#x2F;下，那么请ssh登录虚拟机，用whereis命令找出来即可了。<br>如果你的MySQL启动不了，请将my.cnf的文件映射去掉，可能是我的配置文件的锅，请自己写一下。</p>
<h2 id="ssh登录使用"><a href="#ssh登录使用" class="headerlink" title="ssh登录使用"></a>ssh登录使用</h2><p>输入命令登录</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker-machine <span class="token function">ssh</span> *你的虚拟机名*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>输入命令进入MySQL环境</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it mysql <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>修改加密方式和root密码</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ALTER <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="token string">'*你的root密码*'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>退出ctrl+d，输入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">logout</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>到这里，你的mysql8.0就可以愉快的使用了。</p>
]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>VMware</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+NexT个人博客升级遇到的坑</title>
    <url>/post/38257/</url>
    <content><![CDATA[<h2 id="写在前面的"><a href="#写在前面的" class="headerlink" title="写在前面的"></a>写在前面的</h2><p>你们可爱的博主大人又回来继续更新博客了，中间才3个月没有更新，在正常不过了，毕竟我可是要成为年更区、与作者比命长分舵的一只鸽子（大误）。好了，言归正传，本次带来的是我的个人博客的更新以及遇到的各种坑，为了防止我以后再次踩坑<del>（虽然这是必定的）</del>，所以特此留念。</p>
<h2 id="更新内容"><a href="#更新内容" class="headerlink" title="更新内容"></a>更新内容</h2><p>为了让没有经历过本博客黑暗时代的童鞋们对本站有所了解，所以这里将更新或添加的内容列举一下下。</p>
<ol>
<li>Hexo版本更新为最新版</li>
<li>NexT主题更新为最新版</li>
<li>添加头像旋转</li>
<li>添加Valine评论</li>
<li>将自定义<del>（抄袭）</del>的版权信息修改为官方的版权信息</li>
<li>为官方的版权信息添加地址复制按钮</li>
<li>换用靠谱的阅读人数统计</li>
<li>踩坑&amp;填坑😭</li>
</ol>
<p>好吧，这和从头捣鼓一遍好像差不多。。。  </p>
<h2 id="Hexo版本更新为最新版"><a href="#Hexo版本更新为最新版" class="headerlink" title="Hexo版本更新为最新版"></a>Hexo版本更新为最新版</h2><p>万恶之源就是这一步，如果不是我想更新Hexo，后面也不会由这么多事，更新很简单,直接到<a href="https://hexo.io/">Hexo官网</a>找最新版安装教程即可。nodejs安装命令如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后坑就来了，Windows10下无法配置Hexo的环境变量，直接敲Hexo会显示如下错误：<br><img src="/1.png" alt="在此系统上禁止运行脚本"><br>神奇Windows禁止运行脚本，网上有解除这个限制的方法，但我懒得弄了，所以每次使用Hexo需要先敲npx，用npx来调用Hexo。Linux和Mac似乎没有这个坑。。。</p>
<h2 id="NexT主题更新为最新版"><a href="#NexT主题更新为最新版" class="headerlink" title="NexT主题更新为最新版"></a>NexT主题更新为最新版</h2><p>Hexo升级了，主题当然也要升级，我用的NexT，所以区官网找安装方法，如下图：<br><img src="/2.png" alt="安装NexT方法"><br>然后，你会发现NexT依旧是6.0.0版本，为什么呢？去这个github仓库看看就知道了，如下图：<br><img src="/3.png" alt="仓库搬迁公告"><br>对，NexT仓库搬迁了，然而中文官网的地址并没有更新，我之前配了半小时的内容又作废了。。。<br>最新版的安装命令如下（在Hexo的目录下运行）：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/theme-next/hexo-theme-next themes/next<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="添加头像旋转"><a href="#添加头像旋转" class="headerlink" title="添加头像旋转"></a>添加头像旋转</h2><p>最新版NexT已经支持头像旋转了，直接在<strong>主题配置文件</strong>中搜索<em>avatar</em>即可找到头像设置<br><img src="/4.png" alt="头像设置"><br>当然老版那种自立门户的方法也是可以的，百度一搜都是，这里不粘贴了</p>
<h2 id="添加Valine评论"><a href="#添加Valine评论" class="headerlink" title="添加Valine评论"></a>添加Valine评论</h2><p>最新版NexT评论的添加方法也有所不同，需要先在<strong>主题配置文件</strong>中搜索<em>comments</em>，在<em>active</em>里填上<em>valine</em>，如下图：<br><img src="/5.png" alt="comments设置"><br>然后再搜索<em>valine</em>把LeanCloud上的app_id和app_key填上，<em>enable</em>设为true，剩下的就是设置了，我的设置如下：<br><img src="/6.png" alt="valine设置"><br><strong>注意：</strong>LeanCloud上的安全域名记得填上自己的博客地址，不然评论只有localhost发的能记到LeadCloud上。。。别问我是怎么知道的</p>
<h2 id="将自定义（抄袭）的版权信息修改为官方的版权信息"><a href="#将自定义（抄袭）的版权信息修改为官方的版权信息" class="headerlink" title="将自定义（抄袭）的版权信息修改为官方的版权信息"></a>将自定义<del>（抄袭）</del>的版权信息修改为官方的版权信息</h2><p>以前的版权信息是从一位大佬那<del>抄</del>借来的，但最新版NexT自带了版权信息，所以现在又改成NexT的版权信息了，毕竟东西不要借（chao)太(tai)久(duo)，现在的版权信息如下：<br><img src="/7.png" alt="版权信息"><br>这个设置简单，直接在<strong>主题配置文件</strong>中搜索<em>creative_commons</em>自己调。<br>你问我那个复制按钮哪来的，当然是<del>抄</del>借鉴官方的源代码自己添的了。  </p>
<h2 id="为官方的版权信息添加地址复制按钮"><a href="#为官方的版权信息添加地址复制按钮" class="headerlink" title="为官方的版权信息添加地址复制按钮"></a>为官方的版权信息添加地址复制按钮</h2><p>嘿嘿，<del>读书人</del>程序员的事，怎么能叫抄呢，应该叫借鉴~~借鉴~~<br>NexT官方支持代码复制按钮了，所以为了风格统一，需要给我的Copyright也加上复制按钮，这个配置比较麻烦，步骤如下：</p>
<h3 id="第一步-新建按钮样式"><a href="#第一步-新建按钮样式" class="headerlink" title="第一步 新建按钮样式"></a>第一步 新建按钮样式</h3><p>先在themes\next\source\css下新建_custom文件夹，然后在文件夹里新建custom.styl文件，这个文件里的内容如下：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.copy-link-btn</span> <span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> $black-dim<span class="token punctuation">;</span>
    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span> $font-weight-bolder<span class="token punctuation">;</span>
    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.6<span class="token punctuation">;</span>
    <span class="token property">outline</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 2px 6px<span class="token punctuation">;</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> opacity .3s ease-in-out<span class="token punctuation">;</span>
    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>
    <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>
    <span class="token function">disable-user-select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token selector">if (hexo-config('codeblock.copy_button.style') == 'flat')</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
        <span class="token property">border</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
        <span class="token property">font-size</span><span class="token punctuation">:</span> $font-size-smaller<span class="token punctuation">;</span>
        <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
        <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token selector">else if (hexo-config('codeblock.copy_button.style') == 'mac')</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
        <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>
        <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
        <span class="token property">top</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token selector">else</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> $gainsboro<span class="token punctuation">;</span>
        <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>#fcfcfc<span class="token punctuation">,</span> $gainsboro<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #d5d5d5<span class="token punctuation">;</span>
        <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>
        <span class="token property">font-size</span><span class="token punctuation">:</span> $font-size-smaller<span class="token punctuation">;</span>
        <span class="token property">right</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>
        <span class="token property">top</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>官方CSS里借鉴的~~，当然如果你要自定义主题颜色什么的可以在这个文件里自己加</p>
<h3 id="第二步-导入这个文件"><a href="#第二步-导入这个文件" class="headerlink" title="第二步 导入这个文件"></a>第二步 导入这个文件</h3><p>在themes\next\source\css\main.styl文件（_custom文件夹那层）最后添加这几行代码让custom.styl导入：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">// Add Custom Layer
// --------------------------------------------------
<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"_custom/custom.styl"</span> if <span class="token punctuation">(</span><span class="token function">hexo-config</span><span class="token punctuation">(</span><span class="token string">'custom.css'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>喜欢自己起名的宝宝们注意这里的路径要写对哟</p>
<h3 id="第三步-编辑JS"><a href="#第三步-编辑JS" class="headerlink" title="第三步 编辑JS"></a>第三步 编辑JS</h3><p>先在themes\next\source\js下新建custom.js文件，内容如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'li.post-copyright-link'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    link<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">'beforeend'</span><span class="token punctuation">,</span> <span class="token string">'&lt;div class="copy-link-btn">&lt;i class="fa fa-clipboard">&lt;/i>&lt;/div>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> button <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.copy-link-btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">var</span> code <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">;</span>
        <span class="token keyword">var</span> ta <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'textarea'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ta<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> window<span class="token punctuation">.</span>scrollY <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span> <span class="token comment">// Prevent page scrolling</span>
        ta<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">'absolute'</span><span class="token punctuation">;</span>
        ta<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>
        ta<span class="token punctuation">.</span>readOnly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        ta<span class="token punctuation">.</span>value <span class="token operator">=</span> code<span class="token punctuation">;</span>
        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ta<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> selection <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> selected <span class="token operator">=</span> selection<span class="token punctuation">.</span>rangeCount <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> selection<span class="token punctuation">.</span><span class="token function">getRangeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        ta<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ta<span class="token punctuation">.</span><span class="token function">setSelectionRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> code<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ta<span class="token punctuation">.</span>readOnly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">'copy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        link<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>className <span class="token operator">=</span> result <span class="token operator">?</span> <span class="token string">'fa fa-check'</span> <span class="token operator">:</span> <span class="token string">'fa fa-times'</span><span class="token punctuation">;</span>
        ta<span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// For iOS</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>selected<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            selection<span class="token punctuation">.</span><span class="token function">removeAllRanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            selection<span class="token punctuation">.</span><span class="token function">addRange</span><span class="token punctuation">(</span>selected<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>ta<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseleave'</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            event<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'fa fa-clipboard'</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>官方JS里借鉴的~~<br>注意这里插入按钮的CSS样式名字要与之前custom.styl里的CSS样式名字统一</p>
<h3 id="第四步-导入JS"><a href="#第四步-导入JS" class="headerlink" title="第四步 导入JS"></a>第四步 导入JS</h3><p>我选择的导入方式比较麻烦，不过我喜欢~~~<br>在themes\next\layout下新建custom-scripts.swig文件，内容如下</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/custom.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后再在themes\next\layout_layout.swig的最后<strong>body和html结束标记之前</strong>添加代码如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>Add<span class="token operator">--</span><span class="token operator">></span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token keyword">if</span> theme<span class="token punctuation">.</span>custom<span class="token punctuation">.</span>javascript <span class="token operator">%</span><span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#123;</span><span class="token operator">%</span> include <span class="token string">'custom-scripts.swig'</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span><span class="token operator">%</span><span class="token operator">-</span> endif <span class="token operator">%</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后在<strong>主题配置文件</strong>最后追加代码</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"># Add
# Add Custom CSS &amp; JavaScript
custom<span class="token operator">:</span>
  css<span class="token operator">:</span> <span class="token boolean">true</span> 
  javascript<span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>弄完收工。<br>具体代码功能就是将运行custom-scripts.swig给控制接口暴露出来，然后设置为true，使custom-scripts.swig运行，而custom-scripts.swig的功能就是将custom.js添加到html的body里。</p>
<p>这样配置的好处是可以自己编辑CSS和Javascript然后导入，可玩性更高，不过要自己注意避免冲突哟~~~</p>
<h2 id="换用靠谱的阅读人数统计"><a href="#换用靠谱的阅读人数统计" class="headerlink" title="换用靠谱的阅读人数统计"></a>换用靠谱的阅读人数统计</h2><p>这个简单，使用Valine自带的人数统计，然后没了。。。</p>
]]></content>
      <categories>
        <category>小站风云</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
</search>
